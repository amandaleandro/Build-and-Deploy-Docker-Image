name: Build and Deploy Docker Image

# Este workflow é acionado sempre que há um push para o branch main do repositório.
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME: myapp
      DOCKER_TAG_NAME: latest

    steps:
      # Passo 1: Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Passo 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Passo 3: Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Passo 4: Verificar a presença do Dockerfile
      - name: Verify Dockerfile presence
        run: ls -la my-app/Dockerfile

      # Passo 5: Construir a imagem Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG_NAME }} -f my-app/Dockerfile my-app

      # Passo 6: Salvar a imagem Docker em um arquivo tar
      - name: Save Docker image to tar file
        run: |
          docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG_NAME }} -o image.tar

      # Passo 7: Copiar a imagem Docker para o Droplet
      - name: Copy Docker image to Droplet
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          target: /home/${{ secrets.DROPLET_USERNAME }}/image.tar
          source: image.tar

      # Passo 8: Carregar a imagem Docker no Droplet e executar o container
      - name: Load and run Docker image on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.DROPLET_SSH_KEY }}" "${{ secrets.DROPLET_USERNAME }}"@"${{ secrets.DROPLET_HOST }}" << 'EOF'
          docker load -i /home/${{ secrets.DROPLET_USERNAME }}/image.tar
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 80:3000 ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG_NAME }}
          EOF
