name: Build and Deploy Docker Image

# Este workflow é acionado sempre que há um push para o branch main do repositório.

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Passo 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Passo 3: Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Passo 4: Obter SHA abreviado do commit atual
      - name: Get short SHA
        id: vars
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # Passo 5: Verificar a presença do Dockerfile
      - name: Verify Dockerfile presence
        run: ls -la my-app/dockerfile

      # Passo 6: Construir a imagem Docker
      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=${{ env.GITHUB_SHA_SHORT }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f my-app/dockerfile my-app

      # Passo 7: Salvar a imagem Docker em um arquivo tar
      - name: Save Docker image to tar file
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=${{ env.GITHUB_SHA_SHORT }}
          docker save $IMAGE_NAME:$IMAGE_TAG -o image.tar

      # Passo 8: Copiar a imagem Docker para o Droplet
      - name: Copy Docker image to Droplet
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          target: /home/${{ secrets.DROPLET_USERNAME }}/image.tar
          source: image.tar

      # Passo 9: Carregar a imagem Docker no Droplet
      - name: Load Docker image on Droplet
        run: |
          ssh -i ${{ secrets.DROPLET_SSH_KEY }} ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} << 'EOF'
          IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=${{ env.GITHUB_SHA_SHORT }}
          docker load -i /home/${{ secrets.DROPLET_USERNAME }}/image.tar
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          EOF

